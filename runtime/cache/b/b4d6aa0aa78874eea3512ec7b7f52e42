{"content":[{"id":6,"title":"PHP 程序设计之观察者模式的实现","user_id":1,"slug":"observer","thumb":"http://localhost:8362/uploads/2019/05/c3952dc24a4b974280614a608fc9058a.jpg","category_id":1,"status":99,"type":"post","description":"<p>什么是观察者模式？</p><p>一个对象通过添加一个方法（该方法允许另一个对象，即观察者 注册自己）使本身变得可观察。当可观察的对象更改时，它会将消息发送到已注册的观察者。这些 观察者使用该信息执行的操作与可观察的对象无关。结果是对象可以相互对话，而不必了解原因。观察者模式是一种事件系统，意味着这一模式允许某个类观察另一 个类的状态，当被观察的类状态发生改变的时候，观察类可以收到通知并且做出相应的动作;观察者模式为您提供了避免组件之间紧密耦。</p>","create_time":"2019-05-23 11:49:59","modify_time":"2019-05-23 11:53:59","view":48,"publish_time":"2019-05-20 11:50:35","recommend":"N"},{"id":3,"title":"DVI 接口的类别区分","user_id":1,"slug":"dvi","thumb":"http://localhost:8362/uploads/2019/05/7f02d37eb77f7a6bd65687ee83020548.jpg","category_id":1,"status":99,"type":"post","description":"<p> 这台电脑的时候其实是准备写代码来的，所以没有装显卡。然而代码没写多少又想打游戏了 ，于是去卡吧收了个二手显卡，于是开始了“装卡之旅”。</p>","create_time":"2019-05-14 11:49:39","modify_time":"2019-05-23 11:55:14","view":0,"publish_time":"2019-05-22 11:50:20","recommend":"N"},{"id":48,"title":"JointJS处理两条线的交点","user_id":1,"slug":"8814c98dc440c7a96b5260084f5f4771","thumb":"http://localhost:8362/uploads/2019/05/1adf75d2def35933d3cef083af5b4791.jpg","category_id":1,"status":99,"type":"post","description":"<pre><code>使用jointJs绘制流程图时，如果两条连线相交，这两条线不会像Viso一样，对交点进行处理（交点处有弧线）。虽然鼠标选中连线时，单条线会有自动点亮的效果，但是在客户强烈要求下（！！！），我还是做了保存时对两条线交点的处理。</code></pre>","create_time":"2019-05-10 11:50:08","modify_time":"2019-05-23 11:55:42","view":2,"publish_time":"2019-05-15 11:50:45","recommend":"N"},{"id":4,"title":"一个漏洞的发现过程","user_id":1,"slug":"ly-bug","thumb":"http://localhost:8362/uploads/2019/05/774813cb25a1fc58cb66be70cf300eaa.jpg","category_id":1,"status":99,"type":"post","description":"<p>无意间发现的一个漏洞。本想提交乌云，结果一看活动时间，今天晚上就要结束了，遂作罢。整个过程都抱着学习的态度记录了一下，整理成文，以记之。</p>","create_time":"2019-05-06 11:49:44","modify_time":"2019-05-23 11:56:10","view":0,"publish_time":"2019-05-06 11:50:26","recommend":"Y"},{"id":5,"title":"PHP 程序设计之工厂模式的实现 ","user_id":1,"slug":"factory-html","thumb":"http://localhost:8362/uploads/2019/05/58c9d07e1767d6cd3e7f5892c2338d77.jpg","category_id":2,"status":99,"type":"post","description":"<p>什么是工厂模式？</p><p>由工厂类根据参数来决定创建出哪一种产品类的实例；</p><p>工厂类是指包含了一个专门用来创建其他对象的方法的类。 所谓按需分配，传入参数进行选择，返回具体的类。 工厂模式的最主要作用就是对象创建的封装、简化创建对象操作。  </p><p>简单的说，就是调用工厂类的一个方法（传入参数）来得到需要的类；</p>","create_time":"2019-04-19 11:49:49","modify_time":"2019-05-23 11:56:49","view":19,"publish_time":"2019-05-23 11:50:32","recommend":"Y"}],"expire":1558683060490}