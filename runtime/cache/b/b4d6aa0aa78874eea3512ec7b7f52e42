{"content":[{"id":48,"title":"JointJS处理两条线的交点","user_id":1,"slug":"8814c98dc440c7a96b5260084f5f4771","thumb":"fds","category_id":1,"status":99,"type":"post","description":"<p>使用jointJs绘制流程图时，如果两条连线相交，这两条线不会像Viso一样，对交点进行处理（交点处有弧线）。虽然鼠标选中连线时，单条线会有自动点亮的效果，但是在客户强烈要求下（！！！），我还是做了保存时对两条线交点的处理。</p>\n","create_time":1550808316,"modify_time":1550808316,"view":0},{"id":8,"title":"php 闭包与匿名函数","user_id":1,"slug":"closure","thumb":"","category_id":1,"status":99,"type":"post","description":"<p>提到闭包和匿名函数似乎一下子就想到了 javascript ，但其实在很多语言中都有闭包的特性。但是 javascript 坑爹的变量作用域让闭包变得非常重要。而其他语言完善私有共有变量和继承让闭包似乎没有什么卵用。但是为了有点B格，还是看了看 php 的闭包。<br />\n闭包和匿名函数</p>\n","create_time":1467820800,"modify_time":1467820800,"view":33},{"id":6,"title":"PHP 程序设计之观察者模式的实现","user_id":1,"slug":"observer","thumb":null,"category_id":1,"status":99,"type":"post","description":"<p>什么是观察者模式？</p>\n<p>一个对象通过添加一个方法（该方法允许另一个对象，即观察者 注册自己）使本身变得可观察。当可观察的对象更改时，它会将消息发送到已注册的观察者。这些 观察者使用该信息执行的操作与可观察的对象无关。结果是对象可以相互对话，而不必了解原因。观察者模式是一种事件系统，意味着这一模式允许某个类观察另一 个类的状态，当被观察的类状态发生改变的时候，观察类可以收到通知并且做出相应的动作;观察者模式为您提供了避免组件之间紧密耦。</p>\n","create_time":1466524800,"modify_time":1521712727,"view":48},{"id":5,"title":"PHP 程序设计之工厂模式的实现 ","user_id":1,"slug":"factory-html","thumb":null,"category_id":2,"status":99,"type":"post","description":"<p>什么是工厂模式？</p>\n<p>由工厂类根据参数来决定创建出哪一种产品类的实例；</p>\n<p>工厂类是指包含了一个专门用来创建其他对象的方法的类。 所谓按需分配，传入参数进行选择，返回具体的类。 工厂模式的最主要作用就是对象创建的封装、简化创建对象操作。</p>\n<p>简单的说，就是调用工厂类的一个方法（传入参数）来得到需要的类；</p>\n","create_time":1466352000,"modify_time":1521712719,"view":19},{"id":4,"title":"一个漏洞的发现过程","user_id":1,"slug":"ly-bug","thumb":null,"category_id":1,"status":99,"type":"post","description":"<p>无意间发现的一个漏洞。本想提交乌云，结果一看活动时间，今天晚上就要结束了，遂作罢。整个过程都抱着学习的态度记录了一下，整理成文，以记之。</p>\n","create_time":1465660800,"modify_time":1521712711,"view":0}],"expire":1550904177490}